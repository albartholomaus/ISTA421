# **Turn in:** **C#_HomeWork_CH_19**
### **Name:** *Anthony Bartholomaus*
### Professor: *Mr. Carter*

1. ####	What is an enumerable collection?
- *s a collection that implements the System.Collections.IEnumerable interface. Stepping through (enumerating) the elements of the collection.an enumerator as a pointer indicating elements in a list*
---
2. ####	What properties and methods does the IEnumerable interface contain?
- *only has GetEnumerator(),should return an enumerator object that implements the System.
Collections.IEnumerator interface.takes no paramators and returns an enumerator object.*
---
3. #### What properties and methods does the IEnumerator interface contain?
- *Current property to access the item currently pointed to.you use the Reset method to return the pointer back to before the first item in the list, of a collection to create an enumerator, repeatedly calling the MoveNext method.*
---
4. #### What values does the MoveNext() method return? What does it do?
- *calling the MoveNext method, and using the
enumerator to retrieve the value of the Current property, you can move forward through the elements of a collection one item at a time..*
---
5. ####	What values does the Reset() method return? What does it do?
- *the Reset method to return the pointer back to before the first item in the list.*
---
6. ####	Are IEnumerable and IEnumerator type safe? Why or why not? If not, how do you implement type safety?
- *non–type-safe behavior,it returns an object rather than a specific type.Microsoft .NET Framework class library also provides the generic IEnumerator<T> interface, which has a Current property that returns a T instead*
---
7. ####	Why don’t recursive methods retain state when used with data structures like binary trees?
- *you need to remember where you are in the structure so that subsequent calls to the MoveNext method can update the position appropriately.*
---
8. ####	How do you define an enumerator?
- *public class Tree<TItem> : IEnumerable<TItem> where TItem : IComparable<TItem>
{
...
}*
---
9. ####	What is an iterator ?
- *An iterator is a block of code that yields an ordered sequence of values. An iterator is not actually a member of an enumerable class; rather, it specifies the sequence that an enumerator should use
for returning its values. In other words, an iterator is just a description of the enumeration sequence
that the C# compiler can use for creating its own enumerator..*
---
10. ####	What does yield do?
- *The yield keyword indicates the value that should be returned by each iteration. If it helps, you can think of the yield statement as calling a temporary halt to the method, passing back a value to
the caller. When the caller needs the next value, the GetEnumerator method continues at the point at
which it left off, looping around and then yielding the next value. Eventually, the data is exhausted, the
loop fi nishes, and the GetEnumerator method terminates..*
---
